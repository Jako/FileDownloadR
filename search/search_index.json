{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FileDownloadR","text":"<p>Display a list of downloadable files without revealing the file url.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>MODX Revolution 2.8+</li> <li>PHP 7.4+</li> </ul>"},{"location":"#features","title":"Features","text":"<p>This MODX Extra can be used to display a list of files from a directory. The download link for each file is hashed. This way, the full url of the file will not be revealed and the files/directories can be located outside the webroot. Each file can also be assigned a download counter, which is stored in a custom database table. A single file can be uploaded using an upload form.</p>"},{"location":"#license","title":"License","text":"<p>The project is licensed under the GPLv2 license.</p>"},{"location":"#translations","title":"Translations","text":"<p>Translations of the package can be made for the Default Lexicon, the Properties Lexicon and the System Settings</p>"},{"location":"ajax/","title":"AJAX","text":"<p>You can use the following example to submit a form using AJAX and evaluate the result of the submission. For example, if the result is true, you can call the download connector of FileDownloadR to start the download.</p> <p>The example is quite old and uses jQuery Tools for the overlay. It uses a connector in <code>assets/components/yourpackage/connector.php</code> when the form is submitted to download a file and to activate all other download links. </p> <p>The connector has to be added on your own. It has to return a JSON with <code>\"success\": true</code> and <code>\"link\": \"hash\"</code> for the file download.</p> <p>Maybe someone can prepare an example for this connector and a plain javascript version, that replaces this solution.</p> <p>You need to create the following chunks and call <code>[[$DownloadForm]]</code> in the page content.</p>"},{"location":"ajax/#downloadform","title":"DownloadForm","text":"<pre><code>[[!FileDownload?\n&amp;getDir=`assets/downloads`\n&amp;tplFile=`tplDownloadForm`\n&amp;downloadByOther=`1`\n]]\n&lt;div class=\"form_overlay\" id=\"formLink\"&gt;\n&lt;h2&gt;Download Form&lt;/h2&gt;\n&lt;form action=\"[[~[[*id]]]]\" method=\"post\" class=\"form\" id=\"downloaderForm\"&gt;\n    &lt;input type=\"hidden\" name=\"nospam:blank\" value=\"\"&gt;\n    &lt;input type=\"hidden\" name=\"link\" value=\"\"&gt;\n    &lt;label for=\"name\"&gt;Name:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"name\" id=\"name\" value=\"\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"email\"&gt;Email:&lt;/label&gt;\n    &lt;input type=\"email\" name=\"email\" id=\"email\" value=\"\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"phone\"&gt;Phone:&lt;/label&gt;\n    &lt;input type=\"number\" name=\"phone\" id=\"phone\" value=\"\" required&gt;\n    &lt;br&gt;\n    &lt;label for=\"country\"&gt;Country:&lt;/label&gt;\n    &lt;input type=\"text\" name=\"country\" id=\"country\" value=\"\" required&gt;\n    &lt;br&gt;\n    &lt;div class=\"form-buttons\"&gt;\n        &lt;button type=\"submit\"&gt;Send Contact Inquiry&lt;/button&gt;\n        &lt;button type=\"reset\"&gt;Reset&lt;/button&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n&lt;/div&gt;\n[[$tplDownloadScript:htmlToBottom]]\n</code></pre>"},{"location":"ajax/#tpldownloadform","title":"tplDownloadForm","text":"<pre><code>&lt;tr[[+fd.class]]&gt;\n    &lt;td style=\"width:16px;\"&gt;&lt;img src=\"[[+fd.image]]\" alt=\"[[+fd.image]]\"&gt;&lt;/td&gt;\n    &lt;td&gt;\n        &lt;a href=\"javascript:void(0);\" rel=\"#formLink\" id=\"[[+fd.hash]]\"&gt;\n            [[+fd.filename]]\n        &lt;/a&gt;\n        &lt;small&gt;([[+fd.count]] downloads)&lt;/small&gt;\n    &lt;/td&gt;\n    &lt;td&gt;[[+fd.sizeText]]&lt;/td&gt;\n    &lt;td&gt;[[+fd.date]]&lt;/td&gt;\n&lt;/tr&gt;\n[[-- description row if the &amp;chkDesc=`chunkName` is provided --]]\n[[+fd.description:notempty=`&lt;tr&gt;\n    &lt;td&gt;&lt;/td&gt;\n    &lt;td colspan=\"3\"&gt;[[+fd.description]]&lt;/td&gt;\n&lt;/tr&gt;`:default=``]]\n</code></pre>"},{"location":"ajax/#tpldownloadscript","title":"tplDownloadScript","text":"<pre><code>&lt;script&gt;\n    $(function () {\n        var connector = 'assets/components/yourpackage/connector.php?';\n        createForm();\n\n        function createForm() {\n            var fileLink = $('.fd-file a[rel=\"#formLink\"]');\n            fileLink.each(function (i) {\n                var self = $(this);\n                self.overlay({\n                    effect: 'apple',\n                    onLoad: function () {\n                        var id = self.attr('id');\n                        $('#downloaderForm input[name=\"link\"]').val(id);\n                    },\n                    onBeforeClose: function () {\n                        $('.error').hide();\n                        $('#downloaderForm input').each(function () {\n                            $(this).removeClass('invalid');\n                        });\n                        $('#downloaderForm input[name=\"link\"]').val('');\n                        clearForm($('#downloaderForm'));\n                    }\n                });\n            });\n            $('#downloaderForm').validator().submit(function (e) {\n                var form = $(this);\n                if (!e.isDefaultPrevented()) {\n                    $.post(connector + 'assets/components/yourpackage/connector.php?action=web/form/add&amp;ctx=web&amp;' + form.serialize(), function (data) {\n                        if (data &amp;&amp; data.success === true) {\n                            clearForm(form);\n                            fileLink.each(function () {\n                                $(this).overlay().close();\n                            });\n                            fileDownload('assets/components/filedownloadr/connector.php?action=web/file/get&amp;ctx=web&amp;link=' + data.link);\n                            fileLink.each(function () {\n                                var self = $(this);\n                                self.off();\n                                var link = self.attr('id');\n                                self.attr('onclick', 'fileDownload(\"assets/components/filedownloadr/connector.php?action=web/file/get&amp;ctx=web&amp;link=' + link + '\")');\n                            });\n                        } else {\n                            form.data('validator').invalidate(data);\n                        }\n                    }, 'json');\n                    e.preventDefault();\n                }\n            });\n        }\n\n        function clearForm(form) {\n            form.find(':input').each(function () {\n                switch (this.type) {\n                    case 'password':\n                    case 'select-multiple':\n                    case 'select-one':\n                    case 'text':\n                    case 'email':\n                    case 'number':\n                    case 'textarea':\n                        $(this).val('');\n                        break;\n                    case 'checkbox':\n                    case 'radio':\n                        this.checked = false;\n                }\n            });\n        }\n\n        function fileDownload(link) {\n            $('&lt;iframe/&gt;', {\n                src: link\n            }).hide().appendTo($('body'));\n        }\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"contributors/","title":"Contributors","text":"<p>The FileDownloadR project was started in 2011 by Rico Goldsky as a rewite of the FileDownload Evolution package by Kyle Jaebker. It is maintained since 2023 by Thomas Jakobi.</p> <p>Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-modx-extras","title":"Install from MODX Extras","text":"<p>Search for FileDownloadR in the Package Manager of your MODX installation and install it in there.</p>"},{"location":"installation/#manual-installation","title":"Manual installation","text":"<p>If you can't access the MODX Extras Repository in your MODX installation, you can manually install FileDownloadR.</p> <ul> <li>Download the transport package from MODX Extras (or one of the pre-built transport packages in _packages)</li> <li>Upload the zip file to your MODX installation's <code>core/packages</code> folder or upload it manually in the MODX Package Manager.</li> <li>In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button.</li> <li>FileDownloadR should now show up in the list of available packages. Click the corresponding 'Install' button and follow the instructions to complete the installation.</li> </ul>"},{"location":"installation/#build-it-from-source","title":"Build it from source","text":"<p>To build and install the package from source you could use Git Package Management. The GitHub repository of FileDownloadR contains a config.json to build that package locally. Use this option, if you want to debug FileDownloadR and/or contribute bugfixes and enhancements.</p>"},{"location":"plugins/","title":"Plugins","text":"<p>FileDownload contains two deactivated plugins, that have to be renamed and activated afterward (otherwise they are deactivated and reset to the original code after each update of FileDownloadR).</p> <ul> <li>FileDownloadEmail sends an email each time when a file is downloaded.</li> <li>FileDownloadFormSave saves a form submit (FormIt + FormSave) each time when a file is downloaded.</li> </ul> <p>If you want to create your own plugins, the following plugin events are available after the installation of FileDownloadR:</p> Event Properties OnFileDownloadLoad - OnFileDownloadBeforeDirOpen dirPath OnFileDownloadAfterDirOpen dirPath, contents OnFileDownloadBeforeFileDownload hash, ctx, filePath, mediaSourceId, count OnFileDownloadAfterFileDownload hash, ctx, filePath, mediaSourceId, count OnFileDownloadBeforeFileUpload filePath, fileName OnFileDownloadAfterFileUpload filePath, fileName, hash, resourceId"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#snippets","title":"Snippets","text":"<p>There are three snippets included in the package.</p>"},{"location":"usage/#filedownload","title":"FileDownload","text":"<p>This snippet will display a list of files from one or multiple directories. It uses the following properties:</p> Property Description Default ajaxContainerId The container id of the AJAX element. file-download ajaxControllerPage The resource id of the MODX resource used as AJAX connector. - ajaxMode Enable the AJAX mode of the snippet. 0 (No) breadcrumbSeparator Separator string between the parts of the breadcrumb. 0 (No) browseDirectories Enable browsing of subdirectories in the specified directory. 0 (No) chkDesc Name of a chunk that contains the descriptions for the listed files. Files and descriptions have to be listed in the chunk using the following format: path to file/filename|description|| - countDownloads Enable the download count in the database. 1 (Yes) countUserDownloads Enable the download count by user in the database. 0 (No) cssAltRow This class that will be added to each second row in the template chunks. fd-altRow cssDir This class that will be added to all directory entries in the template chunks. fd-dir cssExtension Enable adding a class to each file in the template chunks according to the file extension. 0 (No) cssExtensionPrefix Prefix added to the cssExtension class. fd- cssExtensionSuffix Suffix added to the cssExtension class. - cssFile This class that will be added to all file entries in the template chunks. fd-file cssFirstDir This class that will be added to the first directory entry in the template chunks. fd-firstDir cssFirstFile This class that will be added to the first file entry in the template chunks. fd-firstFile cssGroupDir This class that will be added to a directory entry for multi-directories grouping in the template chunks. fd-group-dir cssLastDir This class that will be added to the last directory entry in the template chunks. fd-lastDir cssLastFile This class that will be added to last file entry in the template chunks. fd-lastFile cssPath This class that will be added to the path in the template chunks when using directory browsing. fd-path dateFormat PHP date format for each file in the output. Y-m-d deleteGroups Comma separated list of user group names. Enable the delete link for users that belong to the specified groups. - directLink Use the direct url of the file, rather than the hashed link. Make sure that the url is web accessible. 0 (No) downloadByOther Disable the download action of this snippet and use a different way. 0 (No) extHidden Comma-separated list of file extensions used to exclude files from the displayed list. - extShown Comma-separated list of file extensions used to include files in the displayed list. - fileCss Path of a CSS file that is registered in the HTML output in the frontend. Set to disabled, to disable the registering. - fileJs Path of a JavaScript file that is registered in the HTML output in the frontend. - getDir Specify the directories displayed in the snippet output. Multiple directories can be specified with a comma-separated list. When multiple directories are specified the directory browsing functionality is disabled. - getFile Specify the file displayed in the snippet output. The getDir parameter is still required and getFile has to be a file inside of the directory. - groupByDirectory Enable grouping the files by directory when multiple directories are specified in the getDir parameter. The tplGroupDir template will be added above each group. 0 (No) imgLocat Path to the images associated with each file extension. The images are output in the [[+fd.image]] placeholder. - imgTypes Name of a chunk that contains the association between file extensions and and images. fdImages mediaSourceId The files and directories are searched relative to the base path of the specified media source. - noDownload If you enable this property, files will be displayed without download link in the list. 0 (No) prefix Prefix for the placeholders in the template chunks. fd. saltText With this text the file path will be extended to be able to create individual hashes for the file download. FileDownloadR showEmptyDirectory Show directories even when they are empty. 0 (No) sortBy Sort type of the files. When directory browsing is enabled the directories are displayed first in the list. When multiple directories are specified and the group by directory feature is used, the files are sorted by each directory path first. filename sortByCaseSensitive Case sensitive option for sorting. 0 (No) sortOrder Sort order. asc sortOrderNatural Sort by natural order. 1 (Yes) toArray Returns the snippet result with print_r without parsing the templates. 0 (No) tplBreadcrumb Name of a chunk that is used as breadcrumb item template. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdBreadcrumbTpl tplDir Name of a chunk that is used as a directory template. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdRowDirTpl tplFile Name of a chunk that is used as a file row template. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdRowFileTpl tplGroupDir Name of a chunk that is used as a template of the directory path if the &amp;groupByDirectory is enabled. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdGroupDirTpl tplIndex Name of a chunk that is used as a index.html template to hide the download directories. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdIndexTpl tplNotAllowed Name of a chunk that is used as a forbidden access template. The login snippet or a redirect to the login page can be used here. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdNotAllowedTpl tplWrapper Name of a chunk that is used as container template of all of the snippet's results. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdWrapperTpl tplWrapperDir Name of a chunk that is used as container template for directories. @BINDING is possible (@INLINE/@FILE/@CHUNK). - tplWrapperFile Name of a chunk that is used as container template for files. @BINDING is possible (@INLINE/@FILE/@CHUNK). - uploadFile Enable the file upload. 0 (No) uploadFileTypes Comma separated list of mime types or extensions to restrict the upload. image/gif,image/jpeg,image/png uploadGroups Comma separated list of user group names. Show the file upload for users that belong to the specified groups. - uploadMaxSize Maximum upload size in bytes. 2000000 userGroups Comma separated list of user group names. This will show the file list for users that belong to the specified groups. Users that don't not belong to this group or are not logged in will receive a message specified in the tplNotAllowed property. - <p>To use the <code>downloadByOther</code> property of the FileDownload snippet, you can read the AJAX example usage</p>"},{"location":"usage/#filedownloadcount","title":"FileDownloadCount","text":"<p>This snippet will display the download count of one directory. It uses the following properties:</p> Property Description Default countDownloads Enable the download count in the database. 1 (Yes) countUserDownloads Enable the download count by user in the database. 1 (Yes) fileCss Path of a CSS file that is registered in the HTML output in the frontend. Set to disabled, to disable the registering. - fileJs Path of a JavaScript file that is registered in the HTML output in the frontend. - getDir Specify the directory displayed in the snippet output. - mediaSourceId The files and directories are searched relative to the base path of the specified media source. - prefix Prefix for the placeholders in the template chunks. fd. saltText With this text the file path will be extended to be able to create individual hashes for the file download. FileDownload toArray Returns the snippet result with print_r without parsing the templates. 0 (No) tpl Name of a chunk that is used as a download link template. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdSingleDirTpl userGroups Comma separated list of user group names. This will show the file list for users that belong to the specified groups. Users that don't not belong to this group or are not logged in will receive a message specified in the tplNotAllowed property. -"},{"location":"usage/#filedownloadlink","title":"FileDownloadLink","text":"<p>This snippet will display a single download link for one file. It uses the following properties:</p> Property Description Default ajaxContainerId The container id of the AJAX element. file-download ajaxControllerPage The resource id of the MODX resource used as AJAX connector. - ajaxMode Enable the AJAX mode of the snippet. 0 (No) chkDesc Name of a chunk that contains the descriptions for the listed files. Files and descriptions have to be listed in the chunk using the following format: path to file/filename|description|| - countDownloads Enable the download count in the database. 1 (Yes) countUserDownloads Enable the download count by user in the database. 0 (No) dateFormat PHP date format for each file in the output. Y-m-d directLink Use the direct url of the file, rather than the hashed link. Make sure that the url is web accessible. 0 (No) fileCss Path of a CSS file that is registered in the HTML output in the frontend. Set to disabled, to disable the registering. - fileJs Path of a JavaScript file that is registered in the HTML output in the frontend. - getFile Specify the file displayed in the snippet output. - imgLocat Path to the images associated with each file extension. The images are output with the placeholder [[+fd.image]]. - imgTypes Name of a chunk that contains the associations between file extensions and and images. fdImages mediaSourceId The files and directories are searched relative to the base path of the specified media source. - noDownload Display only files without their download link in the list. 0 (No) prefix Prefix for the placeholders in the template chunks. fd. saltText With this text the file path will be extended to be able to create individual hashes for the file download. FileDownload toArray Returns the snippet result with print_r without parsing the templates. 0 (No) tpl Name of a chunk that is used as a download link template. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdSingleFileTpl tplNotAllowed Name of a chunk that is used as a forbidden access template. The login snippet or a redirect to the login page can be used here. @BINDING is possible (@INLINE/@FILE/@CHUNK). fdNotAllowedTpl userGroups Comma separated list of user group names. Show the file list for users that belong to the specified groups. Users that don't belong to these groups or that are not logged in will receive a message specified in the tplNotAllowed property. Multiple groups can be specified by using a comma-separated list. -"},{"location":"usage/#system-settings","title":"System Settings","text":"<p>FileDownloadR uses the following system settings in the namespace <code>filedownloadr</code>.</p> Key Name Description Default filedownloadr.email_props Email Properties JSON encoded array of email properties for the FileDownloadEmail plugin. - filedownloadr.exclude_scan Exclude Files Comma-separated list of filenames to be excluded during scanning. <code>.,..,Thumbs.db,.htaccess,.htpasswd,.ftpquota,.DS_Store</code> filedownloadr.ipinfodb_api_key API Key of IPInfoDB.com Get the API Key from https://ipinfodb.com/. - filedownloadr.use_geolocation Use Geolocation by IP Use geolocation by IPInfoDB.com. No"}]}